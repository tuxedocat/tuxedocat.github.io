<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on miauhaus.log</title>
    <link>https://log.tuxedokatze.com/tags/python/index.xml</link>
    <description>Recent content in Python on miauhaus.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy;2011-2018 tuxedocat</copyright>
    <atom:link href="https://log.tuxedokatze.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using pipenv&#39;s virtualenv as a kernel in JupyterHub</title>
      <link>https://log.tuxedokatze.com/2018/using-pipenvs-virtualenv-as-a-kernel-in-jupyterhub/</link>
      <pubDate>Sat, 21 Apr 2018 01:08:30 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2018/using-pipenvs-virtualenv-as-a-kernel-in-jupyterhub/</guid>
      <description>&lt;p&gt;Run &lt;code&gt;python -m ipykernel install --user --name=&amp;lt;kernel-name&amp;gt;&lt;/code&gt; in pipenv-enabled shell.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setup JupyterHub properly&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your pipenv project dir&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pipenv install --dev ipykernel
pipenv shell
python -m ipykernel install --user --name=&amp;lt;kernel-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will generate &lt;em&gt;kernelspec&lt;/em&gt; as &lt;code&gt;~/.local/share/jupyter/kernels/kernel-name&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-this-works&#34;&gt;Why this works?&lt;/h2&gt;

&lt;p&gt;JupyterHub just runs your jupyter notebook process as the same procedure as using jupyter notebook solely.&lt;/p&gt;

&lt;h2 id=&#34;env&#34;&gt;Env&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04.3&lt;/li&gt;
&lt;li&gt;Python 3.6.5&lt;/li&gt;
&lt;li&gt;pipenv 11.9.0&lt;/li&gt;
&lt;li&gt;Jupyter 5.3.0&lt;/li&gt;
&lt;li&gt;JupyterHub 0.8.1&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title> Day One -&gt; Markdown (with metadata)</title>
      <link>https://log.tuxedokatze.com/2018/dayone2md/</link>
      <pubDate>Tue, 03 Apr 2018 21:05:00 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2018/dayone2md/</guid>
      <description>&lt;!-- textlint-enable --&gt;

&lt;p&gt;or an endless journey for finding a better way for keeping a journal or writing blogs with no stress.&lt;br /&gt;
（DayOneのJSONを個別のメタデータ付きのMarkdownにしたかった、という話）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;p&gt;I’ve just published &lt;a href=&#34;https://github.com/tuxedocat/dayone2md&#34;&gt;a repo to Github called “dayone2md”&lt;/a&gt; which contains a silly tiny script for converting Day One’s JSON archive into Pandoc Markdown with YAML-metadata block.&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I’ve been keeping my thoughts or things happened in the day as a journal using Day One.
I’m sure the app is one of the most well-made environment to write &lt;em&gt;personal&lt;/em&gt; things.&lt;/p&gt;

&lt;p&gt;Although I think Day One is, as a whole, quite smooth and worth paying the subscription fee,
I just needed an alternative way to keep my entries safely, and in a less-cumbersome workflow to work with other dev tools.
It would be nice to do writing with familiar tools like Atom, VSCode, and Vim.
Ease of switching various formats for publishing them to my Hugo-enabled blog is another vital point.&lt;/p&gt;

&lt;p&gt;What I think current Day One lacks is that there’s no option to export entries separately, with sane formatted metadata.
Even though the app keeps entries as markdown, you can only create single file archive of JSON, or Markdown&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;This is why I wrote it.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The app also has HTML and PDF export feature, but they are not useful for this purpose.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PyCharm小ネタ</title>
      <link>https://log.tuxedokatze.com/2018/pycharm%E5%B0%8F%E3%83%8D%E3%82%BF/</link>
      <pubDate>Mon, 22 Jan 2018 21:54:09 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2018/pycharm%E5%B0%8F%E3%83%8D%E3%82%BF/</guid>
      <description>&lt;!-- textlint-enable --&gt;

&lt;blockquote&gt;
&lt;p&gt;PyCharm2017.3.3 Linux: Source root が &amp;ldquo;code&amp;rdquo; というディレクトリ名かつPythonパッケージの状態だと、デバッガの立ち上げ時にエラーになる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;環境は、 Ubuntu 16.04.3 + PyCharm CE 2017.3.3。&lt;/p&gt;

&lt;p&gt;Source root ディレクトリ名が &amp;ldquo;code&amp;rdquo; で、以下のようにそれがPythonパッケージの状態となっているとき、&lt;/p&gt;

&lt;!-- Shortcodeはテーマ側であまり対応できてない  --&gt;

&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;NGの状態&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng.png&#34; alt=&#34;NGの状態&#34; /&gt;&lt;/p&gt;

&lt;p&gt;pydevのデバッガのエラーが出る&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng-log.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;エラーログ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng-log.png&#34; alt=&#34;エラーログ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;対処は、codeディレクトリはパッケージ化しない（もしくはリネームする）こと。&lt;/p&gt;

&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ok.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;codeディレクトリはパッケージ化しない&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ok.png&#34; alt=&#34;codeディレクトリはパッケージ化しない（もしくはリネームする）&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;経緯と感想&#34;&gt;経緯と感想&lt;/h2&gt;

&lt;p&gt;デバッガが急に使えなくなって困ってたら、何かの拍子に&lt;code&gt;__init__.py&lt;/code&gt;が作成されてしまったことに気付き、そこからこの問題があると気付けた。
実験用スクリプト置き場だったとはいえ、雑なディレクトリ構造・命名はやめようと思った&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2&#34;&gt;そこを直す方法は今回は取らない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;code/&amp;lt;package_name&amp;gt;&lt;/code&gt;にメインのコードを置いていたが、CLIや実験用ラッパースクリプトを楽に扱いたいから、その上のディレクトリをSource rootにしていた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>🐡Venv with anaconda (use system&#39;s python instead...)</title>
      <link>https://log.tuxedokatze.com/2017/venv-with-anaconda-use-systems-python-instead.../</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/venv-with-anaconda-use-systems-python-instead.../</guid>
      <description>&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Use system&amp;rsquo;s python instead of anaconda&amp;rsquo;s one when using &lt;code&gt;python3 -m venv&lt;/code&gt; to create virtual envs. (or use &lt;code&gt;--without-pip&lt;/code&gt; option)&lt;/p&gt;

&lt;p&gt;venvを使うときにはAnaconda環境のPythonだとコケるので、システムのPythonを使うか、&lt;code&gt;--without-pip&lt;/code&gt;　オプションをつける必要がある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;log&#34;&gt;Log&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;macOS Sierra 10.12.4&lt;/code&gt;, Miniconda3&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For tiny web app with flask, anaconda seemed overkill. &lt;code&gt;venv&lt;/code&gt; is preferable&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;tuxedocat@katzenwelt:flaskapp
➤ python3 -m venv --prompt web ./env
Error: Command &#39;[&#39;/Users/tuxedocat/Codes/_sandbox/flaskapp/env/bin/python3&#39;, &#39;-Im&#39;, &#39;ensurepip&#39;, &#39;--upgrade&#39;, &#39;--default-pip&#39;]&#39; returned non-zero exit status 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;noo&amp;hellip;
&lt;code&gt;--without-pip&lt;/code&gt; worked, but manual instllation of pip is needed.&lt;/p&gt;

&lt;p&gt;What is that &lt;code&gt;ensurepip&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;tuxedocat@katzenwelt:~
➤ python -m ensurepip
/Users/tuxedocat/miniconda3/bin/python: No module named ensurepip
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;OK, anaconda&amp;rsquo;s python cannot work in that way because of &lt;a href=&#34;https://github.com/ContinuumIO/anaconda-issues/issues/952&#34;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(deleted lines that adds conda path to &lt;code&gt;$PATH&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;omake&#34;&gt;Omake&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;tuxedocat@katzenwelt:~
➤ cat .config/fish/functions/use_conda.fish
function use_conda --description &amp;quot;Simply add conda path&amp;quot;
  set -x PATH ~/miniconda3/bin $PATH
  source ~/miniconda3/etc/fish/conf.d/conda.fish
end
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Simple reading management with Wunderlist</title>
      <link>https://log.tuxedokatze.com/2016/simple-reading-management-with-wunderlist/</link>
      <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/simple-reading-management-with-wunderlist/</guid>
      <description>&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Add books to certain list in Wunderlist, mark as done when finished reading, and retrieve completed tasks via API if you want to make list of the books you&amp;rsquo;ve read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register dummy app, and get &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;access_token&lt;/code&gt; on Wunderlist&amp;rsquo;s developer&amp;rsquo;s page&lt;/li&gt;
&lt;li&gt;Create list called &amp;ldquo;Reading&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Get some books&lt;/li&gt;
&lt;li&gt;Add task like &lt;code&gt;Author Name, Title, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reading time&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;Write impressions or quote interesting part of the book, and put them into comments form in Wunderlist&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mark as done when finished or just got bored&lt;/li&gt;
&lt;li&gt;Retrieve list via API

&lt;ul&gt;
&lt;li&gt;Filter by keys such as &lt;code&gt;completed_at&lt;/code&gt;, &lt;code&gt;created_at&lt;/code&gt; if you want&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write article about books I&amp;rsquo;ve read&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;script-python-3-5&#34;&gt;Script (Python 3.5)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
from requests_oauthlib import OAuth2Session
import json
import sys
from typing import Dict


def req_get(s: OAuth2Session, url: str, params: Dict=None):
    got = s.get(url, params=params)
    if got.status_code == 200:
        results = json.loads(got.text)
        return results
    else:
        sys.stderr.write(&amp;quot;HTTP Error: {}&amp;quot;.format(got.status_code))
        return {}


def get_id_of_list(lists: Dict, name: str):
    for d in lists:
        if d[&#39;title&#39;] == name:
            return d[&#39;id&#39;]
    return None


if __name__ == &#39;__main__&#39;:
    client_id = sys.argv[1]
    access_token = sys.argv[2]
    api_url = &amp;quot;https://a.wunderlist.com/api/v1/&amp;quot;

    session = OAuth2Session()
    session.headers[&#39;X-Client-ID&#39;] = client_id
    session.headers[&#39;X-Access-Token&#39;] = access_token
    lists = req_get(session, api_url+&amp;quot;lists&amp;quot;)
    reading_list_id = get_id_of_list(lists, &#39;Reading&#39;)

    if reading_list_id:
        params = {&#39;completed&#39;: True, &#39;list_id&#39;: reading_list_id}
        books = req_get(session, api_url+&amp;quot;tasks&amp;quot;, params)
        for book in sorted(books, key=lambda x: x[&#39;completed_at&#39;]):
            # Write to stdout as markdown&#39;s numbered list formatting
            print(&amp;quot;1. &amp;quot; + book[&#39;title&#39;])
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Link: Notebook collection</title>
      <link>https://log.tuxedokatze.com/2016/link-notebook-collection/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/link-notebook-collection/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jdwittenauer/ipython-notebooks&#34;&gt;https://github.com/jdwittenauer/ipython-notebooks&lt;/a&gt;
&amp;gt; ipython-notebooks - A collection of IPython notebooks covering various topics.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Courseraの&amp;rdquo;Machine Learning by Andrew Ng&amp;rdquo;を含む、いろいろなコースのPython実装版らしい。 他の人が書いたものを見て学ぶには、同じ課題のものを使うのが効果的だと思っているので、すごくありがたい。（Octaveで解いたけど、補助コードが多くてアレだったし。）&lt;/p&gt;

&lt;p&gt;Python implementations for various topics/courses including “Machine Learning” on Coursera by Andrew Ng. It would be effective to learn from codes for the same exercises written by others, which I’ve been thinking lately, I appreciate for publishing this.
(I&amp;rsquo;ve completed the course with Octave, but there are too much helper codes which make the coding process somehow unenjoyable.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[PyCharm] ‘tput unknown terminal “emacs”’ appears when using debugging console w/ iPython</title>
      <link>https://log.tuxedokatze.com/2016/pycharm-tput-unknown-terminal-emacs-appears-when-using-debugging-console-w/-ipython/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/pycharm-tput-unknown-terminal-emacs-appears-when-using-debugging-console-w/-ipython/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;reported-issues&#34;&gt;Reported issues&lt;/h2&gt;

&lt;p&gt;In debugging console (w/ iPython), &lt;code&gt;tput unknown terminal &#39;emacs&#39;&lt;/code&gt; is repeatedly appearing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/30537994/tput-unknown-terminal-emacs-messages-when-using-pycharm-ipython-console-o&#34;&gt;http://stackoverflow.com/questions/30537994/tput-unknown-terminal-emacs-messages-when-using-pycharm-ipython-console-o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/36133447/pandas-printing-tput-unknown-terminal-emacs&#34;&gt;http://stackoverflow.com/questions/36133447/pandas-printing-tput-unknown-terminal-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtrack.jetbrains.com/issue/PY-14999&#34;&gt;https://youtrack.jetbrains.com/issue/PY-14999&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;possible-cause&#34;&gt;Possible cause&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;pycharm installation dir./helpers/pydev/_pydev_bundle/pydev_ipython_console.py&lt;/code&gt;, $TERM is hard-coded

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;line6:  os.environ[&#39;TERM&#39;] = &#39;emacs&#39; #to use proper page_more() for paging&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This overwrites your $TERM setting if you use iPython console when debugging.&lt;/li&gt;
&lt;li&gt;If your env doesn&amp;rsquo;t have terminfo for emacs, then it fails.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;workaround&#34;&gt;Workaround&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add terminfo for emacs

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq/Termcap_002fTerminfo-entries-for-Emacs.html&#34;&gt;https://www.gnu.org/software/emacs/manual/html_node/efaq/Termcap_002fTerminfo-entries-for-Emacs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I just copied terminfo of dumb-terminal as emacs&amp;rsquo;s terminfo, and it worked. (at least stopped showing messages)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Or, edit &lt;code&gt;pycharm installation dir./helpers/pydev/_pydev_bundle/pydev_ipython_console.py&lt;/code&gt;`&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;って内容を &lt;a href=&#34;https://youtrack.jetbrains.com/issue/PY-14999&#34;&gt;PyCharmのIssue Tracker&lt;/a&gt; に書いた。 少しは役に立つといいけど。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Link: Numpy docstring / Howto</title>
      <link>https://log.tuxedokatze.com/2015/link-numpy-docstring-/-howto/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2015/link-numpy-docstring-/-howto/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt&#34;&gt;https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;ちゃんとDocstrings書こうと思ったとき、いつもどの流派の書き方でやればいいのか迷ってしまう。そしてその後は結局、Numpy派をお手本にして書いていた気がするので、今後はこの手間を省略できるように、記録しておく。（大げさな感じ…）&lt;/p&gt;

&lt;p&gt;Sphinxもやりたい。SphinxだけではなくPandocやもっと最近の色々なものなど、Documentation周りのことに興味を持っている。学際領域っぽい魅力があるからかもしれない。（ただしTeXは難しすぎてあきらめている。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.sphinx-users.jp/latest/ext/example_numpy.html&#34;&gt;Sphinx: Numpy Style Docstring&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Link: Type hinting support in PyCharm</title>
      <link>https://log.tuxedokatze.com/2015/link-type-hinting-support-in-pycharm/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2015/link-type-hinting-support-in-pycharm/</guid>
      <description>&lt;p&gt;(via &lt;a href=&#34;https://www.jetbrains.com/pycharm/help/type-hinting-in-pycharm.html&#34;&gt;Type Hinting in PyCharm&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Eclipse (PyDev) → SublimeText + iPython → Atom + iPython (自宅), Spyder, PyCharm, VS2013 (会社) …という感じで色々試してきたけど、PyCharmが一番使いやすいと感じている。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Type Hinting&amp;rdquo;については色々なやり方が提案されていて、まだまだ発展途上なんだけど、その中では、PyCharmやJediが対応しているDocstring形式の方法は、現状の折衷案としてうまいやり方かもしれない。 (Pythonのバージョンと独立しているっぽいので。)
ただ、個人的にはいつもNumpy式のDocstringを真似ていたので、ちょっと面倒くさい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://legacy.python.org/dev/peps/pep-3107/&#34;&gt;PEP3107&lt;/a&gt; や &lt;a href=&#34;http://www.mypy-lang.org/&#34;&gt;Mypy&lt;/a&gt; みたいな関数アノテーション方式のほうが見た目は好きだ。
PyCharmはこちらにも部分的に対応しているみたいなので、最高としか言い様がない (?)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnicodeEncodeError when running python scripts in Atom.io</title>
      <link>https://log.tuxedokatze.com/2015/unicodeencodeerror-when-running-python-scripts-in-atom.io/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2015/unicodeencodeerror-when-running-python-scripts-in-atom.io/</guid>
      <description>&lt;h2 id=&#34;何&#34;&gt;何?&lt;/h2&gt;

&lt;p&gt;Atomのscript-pluginでpython実行時にsys.stdoutのencodingがUS-ASCIIになっていたので、&lt;code&gt;print()&lt;/code&gt;などで&lt;code&gt;UnicodeEncodeError&lt;/code&gt;が出る。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;どうする&#34;&gt;どうする?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt;などでstdoutのencodingを変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=&#39;utf-8&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Atom.appから起動時には、環境変数をログインシェルから読むみたいなので、例えば&lt;code&gt;.bash_profile&lt;/code&gt;に&lt;code&gt;export LANG=&#39;en_US.UTF-8&#39;&lt;/code&gt;などと書いておく。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;経緯&#34;&gt;経緯&lt;/h3&gt;

&lt;p&gt;python3.4をpyenv globalで設定していたのに、atomのscript-pluginではOSXのpython2.7.9が使われるのはなんでだろう、と思っていた。
普段はiterm2でzshを起動するようにしていたので、ログインシェル(bash)の設定ファイルへ環境を反映していなかったのが原因だった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Anaconda</title>
      <link>https://log.tuxedokatze.com/2015/anaconda/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2015/anaconda/</guid>
      <description>&lt;p&gt;Anaconda Scientific Python Distributionを会社マシンとおうちMacMiniに入れた。
自前ビルドでは負荷が高そうなNumpy/Scipyを安定的に運用したいのと、念のため色々な環境を同じバージョンにしておきたいので。
この種の安定版ディストリビューションは瑣末なことで気を揉まなくてすむし、それだけコミュニティも成熟してきたということで、使っていきたい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Windowsでは、そのまま&lt;a href=&#34;https://store.continuum.io/cshop/anaconda/&#34;&gt;Continuumのサイト&lt;/a&gt;から。&lt;/p&gt;

&lt;p&gt;Macではpyenvが対応しているので &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; ~/ pyenv install anaconda3-2.1.0
 ~/ pyenv global anaconda3-2.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じ。&lt;/p&gt;

&lt;p&gt;科学技術計算や機械学習系のパッケージはだいたい揃っているし、ビルドでコケることもない。
科学技術計算用途で、MATLAB・Rの代替環境として広めたいのなら、これぐらい楽な方がいいと思う。&lt;/p&gt;

&lt;p&gt;この調子で、Haskell環境もStackageのLTS Haskellにしようかな&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;(追記) たまたま以前からpyenvを使っていた、というだけです。anaconda distributionには、&lt;code&gt;conda&lt;/code&gt;というパッケージマネージャ兼仮想環境ツールがあるので、今はそちらを使っています。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>