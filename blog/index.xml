<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on miauhaus.log</title>
    <link>https://log.tuxedokatze.com/blog/index.xml</link>
    <description>Recent content in Blogs on miauhaus.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy;2011-2018 tuxedocat</copyright>
    <lastBuildDate>Sat, 21 Apr 2018 01:08:30 +0900</lastBuildDate>
    <atom:link href="https://log.tuxedokatze.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using pipenv&#39;s virtualenv as a kernel in JupyterHub</title>
      <link>https://log.tuxedokatze.com/2018/using-pipenvs-virtualenv-as-a-kernel-in-jupyterhub/</link>
      <pubDate>Sat, 21 Apr 2018 01:08:30 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2018/using-pipenvs-virtualenv-as-a-kernel-in-jupyterhub/</guid>
      <description>&lt;p&gt;Run &lt;code&gt;python -m ipykernel install --user --name=&amp;lt;kernel-name&amp;gt;&lt;/code&gt; in pipenv-enabled shell.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setup JupyterHub properly&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your pipenv project dir&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pipenv install --dev ipykernel
pipenv shell
python -m ipykernel install --user --name=&amp;lt;kernel-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will generate &lt;em&gt;kernelspec&lt;/em&gt; as &lt;code&gt;~/.local/share/jupyter/kernels/kernel-name&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-this-works&#34;&gt;Why this works?&lt;/h2&gt;

&lt;p&gt;JupyterHub just runs your jupyter notebook process as the same procedure as using jupyter notebook solely.&lt;/p&gt;

&lt;h2 id=&#34;env&#34;&gt;Env&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04.3&lt;/li&gt;
&lt;li&gt;Python 3.6.5&lt;/li&gt;
&lt;li&gt;pipenv 11.9.0&lt;/li&gt;
&lt;li&gt;Jupyter 5.3.0&lt;/li&gt;
&lt;li&gt;JupyterHub 0.8.1&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title> Day One -&gt; Markdown (with metadata)</title>
      <link>https://log.tuxedokatze.com/2018/dayone2md/</link>
      <pubDate>Tue, 03 Apr 2018 21:05:00 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2018/dayone2md/</guid>
      <description>&lt;!-- textlint-enable --&gt;

&lt;p&gt;or an endless journey for finding a better way for keeping a journal or writing blogs with no stress.&lt;br /&gt;
（DayOneのJSONを個別のメタデータ付きのMarkdownにしたかった、という話）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;p&gt;I’ve just published &lt;a href=&#34;https://github.com/tuxedocat/dayone2md&#34;&gt;a repo to Github called “dayone2md”&lt;/a&gt; which contains a silly tiny script for converting Day One’s JSON archive into Pandoc Markdown with YAML-metadata block.&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I’ve been keeping my thoughts or things happened in the day as a journal using Day One.
I’m sure the app is one of the most well-made environment to write &lt;em&gt;personal&lt;/em&gt; things.&lt;/p&gt;

&lt;p&gt;Although I think Day One is, as a whole, quite smooth and worth paying the subscription fee,
I just needed an alternative way to keep my entries safely, and in a less-cumbersome workflow to work with other dev tools.
It would be nice to do writing with familiar tools like Atom, VSCode, and Vim.
Ease of switching various formats for publishing them to my Hugo-enabled blog is another vital point.&lt;/p&gt;

&lt;p&gt;What I think current Day One lacks is that there’s no option to export entries separately, with sane formatted metadata.
Even though the app keeps entries as markdown, you can only create single file archive of JSON, or Markdown&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;This is why I wrote it.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The app also has HTML and PDF export feature, but they are not useful for this purpose.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>PyCharm小ネタ</title>
      <link>https://log.tuxedokatze.com/2018/pycharm%E5%B0%8F%E3%83%8D%E3%82%BF/</link>
      <pubDate>Mon, 22 Jan 2018 21:54:09 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2018/pycharm%E5%B0%8F%E3%83%8D%E3%82%BF/</guid>
      <description>&lt;!-- textlint-enable --&gt;

&lt;blockquote&gt;
&lt;p&gt;PyCharm2017.3.3 Linux: Source root が &amp;ldquo;code&amp;rdquo; というディレクトリ名かつPythonパッケージの状態だと、デバッガの立ち上げ時にエラーになる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;環境は、 Ubuntu 16.04.3 + PyCharm CE 2017.3.3。&lt;/p&gt;

&lt;p&gt;Source root ディレクトリ名が &amp;ldquo;code&amp;rdquo; で、以下のようにそれがPythonパッケージの状態となっているとき、&lt;/p&gt;

&lt;!-- Shortcodeはテーマ側であまり対応できてない  --&gt;

&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;NGの状態&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng.png&#34; alt=&#34;NGの状態&#34; /&gt;&lt;/p&gt;

&lt;p&gt;pydevのデバッガのエラーが出る&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng-log.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;エラーログ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ng-log.png&#34; alt=&#34;エラーログ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;対処は、codeディレクトリはパッケージ化しない（もしくはリネームする）こと。&lt;/p&gt;

&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ok.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;codeディレクトリはパッケージ化しない&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
 --&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/pycharm-debugger/ok.png&#34; alt=&#34;codeディレクトリはパッケージ化しない（もしくはリネームする）&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;経緯と感想&#34;&gt;経緯と感想&lt;/h2&gt;

&lt;p&gt;デバッガが急に使えなくなって困ってたら、何かの拍子に&lt;code&gt;__init__.py&lt;/code&gt;が作成されてしまったことに気付き、そこからこの問題があると気付けた。
実験用スクリプト置き場だったとはいえ、雑なディレクトリ構造・命名はやめようと思った&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2&#34;&gt;そこを直す方法は今回は取らない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;code/&amp;lt;package_name&amp;gt;&lt;/code&gt;にメインのコードを置いていたが、CLIや実験用ラッパースクリプトを楽に扱いたいから、その上のディレクトリをSource rootにしていた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>本（定期）</title>
      <link>https://log.tuxedokatze.com/2017/%E6%9C%AC%E5%AE%9A%E6%9C%9F/</link>
      <pubDate>Sat, 30 Dec 2017 18:23:37 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/%E6%9C%AC%E5%AE%9A%E6%9C%9F/</guid>
      <description>&lt;!-- textlint-enable --&gt;

&lt;p&gt;2017年のあいだに読んだ本を思い出しながら感想をだらだらと書くだけの日記。永遠にWIPなPost。
そもそも、本の感想を書くって行為自体が、自分には致命的に向いていない気がするぞ 🤔&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;水野仁輔-いちばんおいしい家カレーをつくる&#34;&gt;水野仁輔、『いちばんおいしい家カレーをつくる』&lt;/h2&gt;

&lt;p&gt;カレーのレシピ本。この著者の数あるカレー本のうち、最近のもの。&lt;/p&gt;

&lt;p&gt;週末に作れるぐらいの手間で、おいしいカレーが家で生産できたらよさそうだと思って買った。
省力化よりも、ふつうに手に入る材料と器具、そして基礎的な知識でどれぐらいおいしくできるか、というDIYカレー道の入門書に思えた。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;欧風（……と日本でおぼろげながらカテゴライズされているタイプのふつうのカレー）&lt;/li&gt;
&lt;li&gt;インド風（同。こちらのほうがちょっと外食っぽい）&lt;/li&gt;
&lt;li&gt;ファイナルカレー（両者のいいとこ取り）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という3つのレシピしか出てこないので、無駄に迷わなくてすむ。
僕みたいに料理のことがさっぱりわからない人間にとって、スパイスの炒め方や野菜ペーストの作り方、玉ねぎの炒め方ぐらいから丁寧に（冗長すぎるぐらいに）書かれている本書はぴったりかもしれない。
コラムの部分は目が滑ってしまって、あまり読んでいないけど……。&lt;/p&gt;

&lt;p&gt;基本形からはじめようという気持ちで何回か作ってみた。
松本研カレー部のことをちょっと思い出した。&lt;/p&gt;

&lt;h2 id=&#34;シャーロット-コットン-現代写真論-新版&#34;&gt;シャーロット・コットン、『現代写真論 新版』&lt;/h2&gt;

&lt;p&gt;現代の写真とはいったいどのようなアートの形態なんだろうか、ということについての本。写真を8つのカテゴリに分けて論じていく。&lt;br /&gt;
（どちらかといえば、自分がどんな感じの写真を好むかということを知りたかったがために買った。なので、ちゃんと読めていない。）&lt;/p&gt;

&lt;h2 id=&#34;j-アドラー-v-ドーレン-本を読む本&#34;&gt;J.アドラー、V.ドーレン、『本を読む本』&lt;/h2&gt;

&lt;p&gt;「積極的な読書」の意義と、そのための方法論をテーマとした本。
原著は1940年代に出たらしい。
眠さと引き換えに、威厳と堅さ、体系立った読書術という点が今でも光っていると思う。
2017年にあえてこの本を読む必要があるかというと……&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:howto&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:howto&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;読書には4つの段階があるとしている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;初級読書

&lt;ul&gt;
&lt;li&gt;文字通りの文意を捉えられる、構造を理解できること。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;点検読書

&lt;ul&gt;
&lt;li&gt;次の段階に進むかどうかを判断するためのもの。&lt;/li&gt;
&lt;li&gt;全体の構造を捉えるための「組織的な」拾い読み、など。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;分析読書

&lt;ul&gt;
&lt;li&gt;時間が十分にあるとき、一冊のみで完結できるなかでは精密な読み方。&lt;/li&gt;
&lt;li&gt;『著者と折り合いをつける』、『本を正しく批評する』という項が特によかった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;シントピカル (syntopical) 読書

&lt;ul&gt;
&lt;li&gt;ある主題に関連する書物を探し出し、それらを横断的に読み、自身の論考を構築するような段階。&lt;/li&gt;
&lt;li&gt;学士号を持っているならこれはできてほしい、らしい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という具合なので、書かれていることは実用的かつ普遍的。&lt;/p&gt;

&lt;p&gt;個人的には、本を読むのは興味と、念のため色々知っておきたいという実利的な面の2つが理由である場合が多い。
だから、この本で書かれているような人生を豊かにする知的な営み、という大層な扱いは、気分によっては重苦しく感じる。
一方で、念のため性と、買った本はとりあえず読むという行動ルールもある。
そこで、点検読書という概念のリファレンスができたのは、無駄な時間を減らすのには役立ちそう。
前からそれっぽいことをしていたのでは？というと、そうかもしれないけど。&lt;/p&gt;

&lt;p&gt;あとこういう本について触れると、後になって未来の自分を後ろから刺すことになりかねない。&lt;/p&gt;

&lt;h2 id=&#34;五十嵐淳-プログラミング言語の基礎概念&#34;&gt;五十嵐淳、『プログラミング言語の基礎概念』&lt;/h2&gt;

&lt;p&gt;通称CoPL本。
プログラミング&lt;strong&gt;言語&lt;/strong&gt;の基礎概念なので、意味論や型システムの数学的扱いを学ぶもの。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fos.kuis.kyoto-u.ac.jp/~igarashi/CoPL/&#34;&gt;オンライン演習システム&lt;/a&gt;が生きているうちに完走できるだろうか。
今のところ、第2章まで解いて寝かせてある（寝かせるとわかる、というわけではない）。&lt;/p&gt;

&lt;h2 id=&#34;ジョセフ-ヒース-啓蒙思想2-0-政治-経済-生活を正気に戻すために&#34;&gt;ジョセフ・ヒース、『啓蒙思想2.0―政治・経済・生活を正気に戻すために』&lt;/h2&gt;

&lt;p&gt;『反脆弱性』と対立しそう。感想はWIP。&lt;/p&gt;

&lt;h2 id=&#34;ナシーム-ニコラス-タレブ-反脆弱性&#34;&gt;ナシーム・ニコラス・タレブ、『反脆弱性』&lt;/h2&gt;

&lt;p&gt;反 啓蒙思想1.0。「反脆弱性」という概念の発明および歴史からの再発見について。&lt;/p&gt;

&lt;p&gt;分厚い、寄り道ばかり、繰り返しが多い、やたらと強い表現が多い文体の訳、特定の話題・集団に対する内容（教育システム、医療、健康法）への執着とそれらについての若干の自然主義的誤謬っぽさ、など、ノイズが多い本だった。&lt;/p&gt;

&lt;p&gt;読んでいて、「小さな変動に対して頑健、長期的には、負のブラックスワンによる損失より正のブラックスワンによる利益が大きくなるようなオプションを持てる性質」を試されている感じがした。&lt;/p&gt;

&lt;!-- 巻末に凸性を用いた専門的な証明がある、とあったが、どうなんだ。 --&gt;

&lt;h2 id=&#34;wip&#34;&gt;WIP…&lt;/h2&gt;

&lt;p&gt;ちゃんとしたことを書けるように、読書記録をつけないとな〜。Kindle版を買った本なら、ハイライト部分を読めば思い出せるんだけど。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:howto&#34;&gt;「よくある読書術の本じゃん」って感想が出かけたところで、&lt;a href=&#34;http://readingmonkey.blog45.fc2.com/blog-entry-99.html&#34;&gt;シントピカル・リーディングについてみんなが誤解したままな理由：アドラー『本を読む本』&lt;/a&gt; という記事があった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:howto&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>これなら伝わりそう（たのむ……）</title>
      <link>https://log.tuxedokatze.com/2017/joeltest4mlsys/</link>
      <pubDate>Thu, 23 Nov 2017 23:05:11 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/joeltest4mlsys/</guid>
      <description>&lt;!-- textlint-enable --&gt;

&lt;blockquote&gt;
&lt;p&gt;Naver の Lucy Park氏による ACML-AIMLP Workshop での 発表 &lt;a href=&#34;https://www.lucypark.kr/docs/slides/2017-acml/#/&#34;&gt;&amp;ldquo;My model has higher BLEU, can I ship it? The Joel Test for machine learning systems&amp;rdquo;&lt;/a&gt; をざっと読んだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;joel-test-ソフトウェア開発チーム-プロジェクトの質の評価&#34;&gt;Joel Test: ソフトウェア開発チーム・プロジェクトの質の評価&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://japanese.joelonsoftware.com/Articles/TheJoelTest.html&#34;&gt;Joel Test (Joel on Software日本語版)&lt;/a&gt; は、ソフトウェア開発チームの質を評価する、「12個のYes/Noで答えられる質問リスト」のこと。色々便利に使おうとする例や、これ自体が時代遅れだとする記事も出るぐらい時が流れたが、今回それらは関係ない。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;ソース管理システムを使っているか？&lt;/li&gt;
&lt;li&gt;１オペレーションでビルドを行えるか？&lt;/li&gt;
&lt;li&gt;毎日ビルドを行うか？&lt;/li&gt;
&lt;li&gt;障害票データベースを持っているか？&lt;/li&gt;
&lt;li&gt;新しいコードを書くまえにバグを修正するか？&lt;/li&gt;
&lt;li&gt;更新可能なスケジュール表を持っているか？&lt;/li&gt;
&lt;li&gt;仕様書を持っているか？&lt;/li&gt;
&lt;li&gt;プログラマは静かな労働環境にあるか？&lt;/li&gt;
&lt;li&gt;買える範囲で一番良い開発ツールを使っているか？&lt;/li&gt;
&lt;li&gt;テスト担当者はいるか？&lt;/li&gt;
&lt;li&gt;プログラマを採用するときにコードを書かせるか？&lt;/li&gt;
&lt;li&gt;「廊下での使い勝手テスト」を行っているか？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;こうやって問われるとちょっと自信をもって回答できない。少なくとも今いる環境では……。
まぁ、そもそもソフトウェア開発メインかどうかすら怪しい、なんともふらふらした立場にいるので、ひとまず置いておく。&lt;/p&gt;

&lt;h2 id=&#34;機械学習システムのための-joel-test&#34;&gt;機械学習システムのための Joel Test&lt;/h2&gt;

&lt;p&gt;Naver の Lucy Park氏による ACML-AIMLP Workshop での 発表 &lt;a href=&#34;https://www.lucypark.kr/docs/slides/2017-acml/#/&#34;&gt;&amp;ldquo;My model has higher BLEU, can I ship it? The Joel Test for machine learning systems&amp;rdquo;&lt;/a&gt; をざっと読んだ。&lt;/p&gt;

&lt;p&gt;機械翻訳システムの実運用を例に、Scullyの一連の論文&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; で示された「機械学習システムの技術的負債化」の問題に向き合うための方策を議論している。&lt;/p&gt;

&lt;p&gt;タイトルの通り、キャッチーなわかりやすいスライドでよかった。（機械翻訳はあくまでこの事例での背景。別にBLEUでいいとかダメとかの話は中心ではない。例としては出てくるけど…。）&lt;/p&gt;

&lt;p&gt;スライドでざっと挙げられている「機械学習システムのための Joel Test」はこんな感じ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Do you keep your data versioned as well as your code? （コードだけじゃなくてデータもバージョン管理してる？）&lt;/li&gt;
&lt;li&gt;Do you have an experiment database? （実験データベースはある？）&lt;/li&gt;
&lt;li&gt;Do you have specified evaluation metrics? （定まった評価尺度はある？）&lt;/li&gt;
&lt;li&gt;Do the evaluation datasets match the needs of your users? （ユーザーのニーズに適合した評価データはある？）&lt;/li&gt;
&lt;li&gt;Can you reproduce your experiments in one step? （実験は1ステップで再現できる？）&lt;/li&gt;
&lt;li&gt;Do you have up-to-date documents? （ドキュメントは常に最新？）&lt;/li&gt;
&lt;li&gt;Do you have the best computational resources money can buy? （お金で買える最高の計算機資源はもってる？）&lt;/li&gt;
&lt;li&gt;Do you have tools to test model training? （モデルの学習をテストするためのツールはある？）&lt;/li&gt;
&lt;li&gt;Do you have tools to interpret your models? （モデルを解釈するためのツールはある？）&lt;/li&gt;
&lt;li&gt;Can you easily replace a component of your algorithm? （簡単にどこかの部分を入れ替えられるつくりになってる？）&lt;/li&gt;
&lt;li&gt;Does your team have a clear vision? （チームには明確なビジョンがある？&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:vision&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:vision&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;うちのスコアは&#34;&gt;うちのスコアは？&lt;/h2&gt;

&lt;p&gt;Joel on Software から引用すると、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;１２点は完璧で、１１点は許せる範囲だ。だが、１０点以下だったら君は本当に深刻な問題を抱えていることになる。実際のところ、大半のソフトウェア開発組織は２点か３点の状態で仕事をしている。そして、彼らは本当に助けを必要としている。なぜなら、マイクロソフトのような会社は常に１２点の状態でいるのだから。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ML版は11個しかないので、単純に1点下げて考えればいいのだろうか。&lt;/p&gt;

&lt;p&gt;今の環境は インダストリィ3.10.0 って感じの製造業にくっついているデータ分析部門みたいなやつなので、当然点数は悲しい感じになっている。
直近ではやっていくしかない💪 が、自分も企業自体も、それじゃつらいだけなので、なんとかしたい。&lt;/p&gt;

&lt;p&gt;（あえて）こうしたものを後追いで導入するような環境に身を置いているのだから、先人の知恵を借りたい。
そう思って、[Scully+2014, 2015]を一緒に読みましょう、といっても自分と同じような人しかそれに参加しなかった経緯がある。
つらい経験をしないとわからないならまだしも、そこまでいかないと問題の存在すら見えないのであれば、他人の経験が無駄になってしまう。
もしそうなら、自分はもう脱出するしかなくなる。&lt;/p&gt;

&lt;p&gt;その前の確認として、このチェックリストは使えそうだな〜と思った。なんでそんなのが必要なの？と言われても、今ならまだ対話ができる余裕は互いにあるのだから。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Sculley, D., Holt, G., Golovin, D., Davydov, E., Phillips, T., Ebner, D., … Young, M. (2014). Machine Learning : The High-Interest Credit Card of Technical Debt. In SE4ML: Software Engineering for Machine Learning (NIPS 2014 Workshop) (pp. 1–9). &lt;a href=&#34;https://doi.org/10.1007/s13398-014-0173-7.2&#34;&gt;https://doi.org/10.1007/s13398-014-0173-7.2&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Sculley, D., Holt, G., Golovin, D., Davydov, E., Phillips, T., Ebner, D., … Dennison, D. (2015). Hidden Technical Debt in Machine Learning Systems. In NIPS’15 Proceedings of the 28th International Conference on Neural Information Processing Systems. Retrieved from &lt;a href=&#34;https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf&#34;&gt;https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:vision&#34;&gt;この文だけではビジョンがあるかどうかだが、この項目のスライドで &amp;ldquo;Keep in mind that a vision is USELESS if no one is aware about(原文ママ) it&amp;rdquo;  とある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:vision&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hugoのテーマ</title>
      <link>https://log.tuxedokatze.com/2017/hugo%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/hugo%E3%81%AE%E3%83%86%E3%83%BC%E3%83%9E/</guid>
      <description>&lt;p&gt;芸術の秋、
とはいっても、それらしいことは特に何もやっていない。
昨日おとといと出かけて疲れきっていたので、きょうは10時まで寝ていた。&lt;/p&gt;

&lt;p&gt;ここ数日やったことといえば、ちょこちょことHugoのテーマをいじっていたことぐらいかもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;もともとは &amp;ldquo;Hemingway&amp;rdquo; というテーマを使っていた。
そのあと、そのForkである&amp;rdquo;Hemingway2&amp;rdquo;へ乗り換えていた。
でも結局いろいろいじる必要が出てきたので、自分のFork&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;を作ってしまった。&lt;/p&gt;

&lt;p&gt;結果、いろいろな細かい不満が解消されたと同時に、ウェブっぽい話をちょっとは知ることができた。
Hugo自体のコードは全く見てないけど、その仕組みの大部分であるGo Templateはなんとなくわかってきた。
本筋ではないけど、設定ファイル記述言語としてのTomlがかなり簡潔でよさそうなことも実感できてよかった。&lt;/p&gt;

&lt;p&gt;Hugoテーマの差分はだいたい以下のもの：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tags/Categoriesなどを生成するための &lt;code&gt;terms.html&lt;/code&gt; の追加

&lt;ul&gt;
&lt;li&gt;Blackburnというテーマを参考にした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mathjaxのロード部の修正とconfig.tomlでの有効・無効切り替え&lt;/li&gt;
&lt;li&gt;スタイルの変更（下記）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Webっぽいことといえば、Sass で書いたスタイルシートを CSS にビルドする仕組みを（Hucoreにあったものだけど）試してみた。Sassが2017年的かどうかはわからないけど、元々のテーマがかなり簡潔で、JS側も含めたそういうフレームワークに左右されない感じだったのがよかった。&lt;/p&gt;

&lt;p&gt;もうちょっと楽をしたいので、&lt;code&gt;yarn&lt;/code&gt; を使って（2017年的かどうかはわからない） &lt;code&gt;gulp&lt;/code&gt; と &lt;code&gt;gulp-sass&lt;/code&gt; を導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yarn config set prefix /usr/local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn global add gulp gulp-sass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともとのテーマに &lt;code&gt;gulpfile.js&lt;/code&gt; が含まれていて、そこにタスクが定義されているので拝借する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yarn gulp # デフォルトのタスク。Sassをビルドしてstatic/ 内に配置する&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn gulp watch # Sassの変更を監視して、差分があれば自動的に更新する。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じ。日本語フォントの適用や、ちょっとした外見の変更だけで、特に大きな差分はない。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;そのほかのできごと 1：大学院時代の友人たちと丸の内でシュラスコを食べた。「丸の内にゃんにゃんOL」という概念を獲得した。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;そのほかのできごと 2：横浜オクトーバーフェストに行ってきた。 🍺はおいしかったけど、連休だったためかとても混んでいて疲れた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://github.com/tuxedocat/tuxedoneko&#34;&gt;https://github.com/tuxedocat/tuxedoneko&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>現時点でのベスト？（キーボードのはなし）</title>
      <link>https://log.tuxedokatze.com/2017/%E7%8F%BE%E6%99%82%E7%82%B9%E3%81%A7%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/%E7%8F%BE%E6%99%82%E7%82%B9%E3%81%A7%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97/</guid>
      <description>&lt;p&gt;注文していたキーボード（ARCHISS ProgressTouch RETRO TINY）が届いた。
個人的に無印HHKB Pro2に感じていた不満&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;がほとんど瞬時に解消されて、QoLが向上した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/keyboard/archiss-1.jpg&#34; alt=&#34;外観&#34; /&gt;&lt;/p&gt;

&lt;p&gt;静音赤軸（ピンク軸）バージョンを買ったのだけど、前に買った同型の赤軸版&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;にシリコンリングをつけたものよりも、ずっと静かでびっくりした。
シリコンリングによって、キーを目一杯押したときの音や衝撃はだいぶ緩和されたけど、その後の「戻り」の際に生じる高い周波数の音にはあまり効果はなかった。
こちらのピンク軸版は、全体的にそういう周波数の音が小さくなっている気がする。&lt;/p&gt;

&lt;p&gt;配列に関しては、Esc キーだけ、&lt;code&gt;~&lt;/code&gt;  キーと被っているので、それらを入力するには、Fnキーと同時押しするか、Fn+Qでロックをかけるかする必要がある。
Vimをつかうときには、たぶん &lt;code&gt;ctrl+[&lt;/code&gt; をモード切替に使う方がよさそう。&lt;/p&gt;

&lt;p&gt;あと、細かいところだけど、Mac向けのキートップが用意されていないので（そして少し長めのWinキーはひとつしかないのでなおさら）下の写真みたいにちょっと変な感じになってしまう。
Mac向けのCommandキー・Optionキーを作ってもらえたらもっと最高になりそう。
でも、キートップが2色成形&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;なので、コスト的にそういうものが提供されるかどうかはわからない……。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/keyboard/archiss-2.jpg&#34; alt=&#34;配列&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;macos向けの設定&#34;&gt;macOS向けの設定&lt;/h2&gt;

&lt;p&gt;これまで、Karabiner Elementsのお世話にはなっていなかったけど、ここですごく有用だということがわかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本体のDipスイッチは、&lt;code&gt;1000&lt;/code&gt; (Caps to Ctrl)&lt;/li&gt;
&lt;li&gt;Karabiner Elements で Magic Keyboard風に…

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;right_control&lt;/code&gt;  -&amp;gt; &lt;code&gt;right_option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right_option&lt;/code&gt; -&amp;gt; &lt;code&gt;right_command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_option&lt;/code&gt; -&amp;gt; &lt;code&gt;left_command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_command&lt;/code&gt; -&amp;gt; &lt;code&gt;left_option&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あまりに凝った設定をすると、Macbook Proを使うときや、設定が消えたときに困りそうなのでやめておいた。&lt;/p&gt;

&lt;h2 id=&#34;ほかに迷ったもの&#34;&gt;ほかに迷ったもの&lt;/h2&gt;

&lt;p&gt;ひとに薦められて気になったもの：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MISTEL Barocco

&lt;ul&gt;
&lt;li&gt;かっこいいと思った。でも、ピンク軸版がなかったのと、ケーブルが意外と邪魔そうだった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RealForceシリーズ

&lt;ul&gt;
&lt;li&gt;昔触らせてもらって、すごく静かで打ち心地もよかったのを覚えている。&lt;/li&gt;
&lt;li&gt;でも、コンパクトじゃないし、意匠が好みではなかった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HHKB Type-S

&lt;ul&gt;
&lt;li&gt;価格と同じものを買うことへの抵抗感から。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Majestouch Minila

&lt;ul&gt;
&lt;li&gt;ほぼ同じようなスペックだったので最有力候補だったけど、ちょっと配列が詰まりすぎだと思った。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hhkbどうしよう&#34;&gt;HHKBどうしよう&lt;/h2&gt;

&lt;p&gt;（NAIST時代から6年ぐらい使ってきたけど、）どうしよう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://log.tuxedokatze.com/img/keyboard/archiss-and-hhkb.jpg&#34; alt=&#34;HHKBどうしよう&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Type-Sではないからなのか、机との相性が悪いのか、結構タイプ音がするし、指への衝撃も大きいと感じていた。音だけなら自宅で使う上ではあまり問題にはならないが、指が疲れるのはやっぱりつらい面があった。半公式グッズである吸振ゴムマットも試したけど、あまり変わらない印象だった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;確か”TKL赤軸”を買ったのは今年の1月ぐらいだった。もしかしたら、当時はAmazonで買えなかっただけかもしれないけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;かなり高品質だと思った。機械的に故障したから買い換えた、という事例は今まで生きてて一度も無く、それよりも外見が汚くなったからという場合の方が多かったので、この点はうれしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>🐡Venv with anaconda (use system&#39;s python instead...)</title>
      <link>https://log.tuxedokatze.com/2017/venv-with-anaconda-use-systems-python-instead.../</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/venv-with-anaconda-use-systems-python-instead.../</guid>
      <description>&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Use system&amp;rsquo;s python instead of anaconda&amp;rsquo;s one when using &lt;code&gt;python3 -m venv&lt;/code&gt; to create virtual envs. (or use &lt;code&gt;--without-pip&lt;/code&gt; option)&lt;/p&gt;

&lt;p&gt;venvを使うときにはAnaconda環境のPythonだとコケるので、システムのPythonを使うか、&lt;code&gt;--without-pip&lt;/code&gt;　オプションをつける必要がある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;log&#34;&gt;Log&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;macOS Sierra 10.12.4&lt;/code&gt;, Miniconda3&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For tiny web app with flask, anaconda seemed overkill. &lt;code&gt;venv&lt;/code&gt; is preferable&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;tuxedocat@katzenwelt:flaskapp
➤ python3 -m venv --prompt web ./env
Error: Command &#39;[&#39;/Users/tuxedocat/Codes/_sandbox/flaskapp/env/bin/python3&#39;, &#39;-Im&#39;, &#39;ensurepip&#39;, &#39;--upgrade&#39;, &#39;--default-pip&#39;]&#39; returned non-zero exit status 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;noo&amp;hellip;
&lt;code&gt;--without-pip&lt;/code&gt; worked, but manual instllation of pip is needed.&lt;/p&gt;

&lt;p&gt;What is that &lt;code&gt;ensurepip&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;tuxedocat@katzenwelt:~
➤ python -m ensurepip
/Users/tuxedocat/miniconda3/bin/python: No module named ensurepip
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;OK, anaconda&amp;rsquo;s python cannot work in that way because of &lt;a href=&#34;https://github.com/ContinuumIO/anaconda-issues/issues/952&#34;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(deleted lines that adds conda path to &lt;code&gt;$PATH&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;omake&#34;&gt;Omake&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;tuxedocat@katzenwelt:~
➤ cat .config/fish/functions/use_conda.fish
function use_conda --description &amp;quot;Simply add conda path&amp;quot;
  set -x PATH ~/miniconda3/bin $PATH
  source ~/miniconda3/etc/fish/conf.d/conda.fish
end
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>2016年内に読んだ本</title>
      <link>https://log.tuxedokatze.com/2017/2016%E5%B9%B4%E5%86%85%E3%81%AB%E8%AA%AD%E3%82%93%E3%81%A0%E6%9C%AC/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2017/2016%E5%B9%B4%E5%86%85%E3%81%AB%E8%AA%AD%E3%82%93%E3%81%A0%E6%9C%AC/</guid>
      <description>&lt;p&gt;正確には「買って、読んだ本」&lt;/p&gt;

&lt;p&gt;順不同。ひとこと感想はTBW&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;専門書-技術書-ノンフィクションなど&#34;&gt;専門書・技術書・ノンフィクションなど&lt;/h2&gt;

&lt;p&gt;まとめてしまっていいものかはわからない&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TODO: 電子版購入の技術書も追記する&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;マーティン・フォード, &amp;ldquo;ロボットの脅威: 人の仕事がなくなる日&amp;rdquo;&lt;/li&gt;
&lt;li&gt;スティーブン・ピンカー, &amp;ldquo;言語を生み出す本能（上・下）&amp;rdquo;&lt;/li&gt;
&lt;li&gt;スティーブ・マコネル, &amp;ldquo;ソフトウェア見積り 人月の暗黙知を解き明かす&amp;rdquo;&lt;/li&gt;
&lt;li&gt;フェリックス・マーティン, &amp;ldquo;21世紀の貨幣論&amp;rdquo;&lt;/li&gt;
&lt;li&gt;トム・デマルコ,  &amp;ldquo;ピープルウェア&amp;rdquo;&lt;/li&gt;
&lt;li&gt;マルク・レビンソン, &amp;ldquo;コンテナ物語: 世界を変えたのは「箱」の発明だった&amp;rdquo;&lt;/li&gt;
&lt;li&gt;カイザー・ファング, &amp;ldquo;ナンバーセンス　ビッグデータの嘘を見抜く「統計リテラシー」の身につけ方&amp;rdquo;&lt;/li&gt;
&lt;li&gt;M.J. アドラー&amp;amp;C.V. ドーレン, &amp;ldquo;本を読む本&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Hadoop Application Architectures&amp;rdquo;&lt;/li&gt;
&lt;li&gt;自然言語処理の基礎と技術&lt;/li&gt;
&lt;li&gt;自然言語処理（放送大学教科書）&lt;/li&gt;
&lt;li&gt;スーザン・フォワード, &amp;ldquo;毒になる親&amp;rdquo;&lt;/li&gt;
&lt;li&gt;フランセス・アッシュクロフト, &amp;ldquo;人間はどこまで耐えられるのか&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Cyrille Rossant, &amp;ldquo;IPython Interactive Computing and Visualization Cookbook&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ジョン・ブラッドショー, &amp;ldquo;猫的感覚&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Effective Python&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ldquo;, &amp;ldquo;詳解 Apache Spark&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;ldquo;, &amp;ldquo;CentOS7 実践ガイド&amp;rdquo;, &amp;ldquo;Kindle Unlimited&amp;rdquo;&lt;/li&gt;
&lt;li&gt;プログラマのためのDocker教科書 インフラの基礎知識＆コードによる環境構築の自動化&lt;/li&gt;
&lt;li&gt;藤田昭人, &amp;ldquo;Unix考古学&amp;rdquo;&lt;/li&gt;
&lt;li&gt;初めてのAnsible&lt;/li&gt;
&lt;li&gt;CG-ARTS協会, コンピュータグラフィックス, Kindle Unlimited&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;小説-物語&#34;&gt;小説・物語&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;アンディ・ウィアー, &amp;ldquo;火星の人&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ミヒャエル・エンデ, &amp;ldquo;モモ&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ジョージ・オーウェル, &amp;ldquo;動物農場－おとぎばなし (岩波文庫) &amp;ldquo;&lt;/li&gt;
&lt;li&gt;吉野茉莉, &amp;ldquo;トクシュー！&amp;rdquo;&lt;/li&gt;
&lt;li&gt;吉野茉莉, &amp;ldquo;トクシュー！2&amp;rdquo;&lt;/li&gt;
&lt;li&gt;コーマック・マッカーシー, &amp;ldquo;ザ・ロード&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;漫画&#34;&gt;漫画&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ベルセルク (1 ~ 38)&lt;/li&gt;
&lt;li&gt;3月のライオン (1 ~ 12)&lt;/li&gt;
&lt;li&gt;僕のヒーローアカデミア (1 ~ 11)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;新書-読みもの&#34;&gt;新書・読みもの&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;小島剛一, &amp;ldquo;トルコのもう一つの顔&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Rochelle Kopp, &amp;ldquo;日本企業の社員は、なぜこんなにもモチベーションが低いのか？&amp;rdquo;&lt;/li&gt;
&lt;li&gt;トレーシー・アロウェイ, &amp;ldquo;脳のワーキングメモリを鍛える！情報を選ぶ・つなぐ・活用する&amp;rdquo;&lt;/li&gt;
&lt;li&gt;デービッド・アトキンソン, ”新・観光立国論―イギリス人アナリストが提言する２１世紀の「所得倍増計画」”&lt;/li&gt;
&lt;li&gt;安宅和人, &amp;ldquo;イシューからはじめよ&amp;rdquo;&lt;/li&gt;
&lt;li&gt;白井恭弘, &amp;ldquo;外国語学習の科学―第二言語習得論とは何か (岩波新書)&amp;rdquo;&lt;/li&gt;
&lt;li&gt;pha, &amp;ldquo;しないことリスト&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ラウル アリキヴィ&amp;amp;前田 陽二, &amp;ldquo;未来型国家エストニアの挑戦 　電子政府がひらく世界 (NextPublishing)&amp;rdquo;, Kindle Unlimited&lt;/li&gt;
&lt;li&gt;アレックス・カー, &amp;ldquo;ニッポン景観論&amp;rdquo;&lt;/li&gt;
&lt;li&gt;トゥーッカ・トイボネン&amp;amp;古市憲寿, &amp;ldquo;国家がよみがえるとき: 持たざる国であるフィンランドが何度も再生できた理由&amp;rdquo;&lt;/li&gt;
&lt;li&gt;濱口桂一郎, &amp;ldquo;働く女子の運命&amp;rdquo;&lt;/li&gt;
&lt;li&gt;カレル・ヴァン・ウォルフレン, &amp;ldquo;いまだ人間を幸福にしない日本というシステム&amp;rdquo;&lt;/li&gt;
&lt;li&gt;苅谷剛彦, &amp;ldquo;知的複眼思考法: 誰でも持っている創造力のスイッチ&amp;rdquo;&lt;/li&gt;
&lt;li&gt;山口周, &amp;ldquo;天職は寝て待て: 新しい転職・就活・キャリア論&amp;rdquo;&lt;/li&gt;
&lt;li&gt;五十嵐太郎, &amp;ldquo;美しい都市・醜い都市: 現代景観論&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Simple reading management with Wunderlist</title>
      <link>https://log.tuxedokatze.com/2016/simple-reading-management-with-wunderlist/</link>
      <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/simple-reading-management-with-wunderlist/</guid>
      <description>&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Add books to certain list in Wunderlist, mark as done when finished reading, and retrieve completed tasks via API if you want to make list of the books you&amp;rsquo;ve read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register dummy app, and get &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;access_token&lt;/code&gt; on Wunderlist&amp;rsquo;s developer&amp;rsquo;s page&lt;/li&gt;
&lt;li&gt;Create list called &amp;ldquo;Reading&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Get some books&lt;/li&gt;
&lt;li&gt;Add task like &lt;code&gt;Author Name, Title, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reading time&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;Write impressions or quote interesting part of the book, and put them into comments form in Wunderlist&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mark as done when finished or just got bored&lt;/li&gt;
&lt;li&gt;Retrieve list via API

&lt;ul&gt;
&lt;li&gt;Filter by keys such as &lt;code&gt;completed_at&lt;/code&gt;, &lt;code&gt;created_at&lt;/code&gt; if you want&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write article about books I&amp;rsquo;ve read&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;script-python-3-5&#34;&gt;Script (Python 3.5)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
from requests_oauthlib import OAuth2Session
import json
import sys
from typing import Dict


def req_get(s: OAuth2Session, url: str, params: Dict=None):
    got = s.get(url, params=params)
    if got.status_code == 200:
        results = json.loads(got.text)
        return results
    else:
        sys.stderr.write(&amp;quot;HTTP Error: {}&amp;quot;.format(got.status_code))
        return {}


def get_id_of_list(lists: Dict, name: str):
    for d in lists:
        if d[&#39;title&#39;] == name:
            return d[&#39;id&#39;]
    return None


if __name__ == &#39;__main__&#39;:
    client_id = sys.argv[1]
    access_token = sys.argv[2]
    api_url = &amp;quot;https://a.wunderlist.com/api/v1/&amp;quot;

    session = OAuth2Session()
    session.headers[&#39;X-Client-ID&#39;] = client_id
    session.headers[&#39;X-Access-Token&#39;] = access_token
    lists = req_get(session, api_url+&amp;quot;lists&amp;quot;)
    reading_list_id = get_id_of_list(lists, &#39;Reading&#39;)

    if reading_list_id:
        params = {&#39;completed&#39;: True, &#39;list_id&#39;: reading_list_id}
        books = req_get(session, api_url+&amp;quot;tasks&amp;quot;, params)
        for book in sorted(books, key=lambda x: x[&#39;completed_at&#39;]):
            # Write to stdout as markdown&#39;s numbered list formatting
            print(&amp;quot;1. &amp;quot; + book[&#39;title&#39;])
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Disk partition manipulation on OSX 10.11</title>
      <link>https://log.tuxedokatze.com/2016/disk-partition-manipulation-on-osx-10.11/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/disk-partition-manipulation-on-osx-10.11/</guid>
      <description>&lt;h3 id=&#34;toc_0&#34;&gt;🐡 💢&lt;/h3&gt;

&lt;p&gt;tl;dr
&amp;gt; For clean installation of OSX, there might be some problems for erasing BootCamp partition and getting it merged with main partition using El Capitan’s DiskUtility.app. In my case, erasing Recovery partition is needed.&lt;/p&gt;

&lt;p&gt;Just a private log of my struggle&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;trace&#34;&gt;Trace&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Saw how people are disappointed with new Macbook Pro&lt;/li&gt;
&lt;li&gt;Start thinking to re-use my old MBP 2011 (clean install)&lt;/li&gt;
&lt;li&gt;Found BootCamp partition of 70GB which I won’t use anymore 🔜 Erase partition via DiskUtility.app&lt;/li&gt;
&lt;li&gt;Reboot, and enter the recovery mode of El Capitan using Recovery HD partition&lt;/li&gt;
&lt;li&gt;Enter DiskUtility, and try merging the system partition with free-space which is formally BootCamp partition via Partition menu&lt;/li&gt;
&lt;li&gt;“Operation failed …”&lt;/li&gt;
&lt;li&gt;Leave DiskUtility, enter Terminal, and play with diskutil command.&lt;/li&gt;
&lt;li&gt;diskutil mergePartitions or some commands failed.&lt;/li&gt;
&lt;li&gt;Found Recovery HD partition, which is right next to system partition, was then merged free-space of BootCamp partition&lt;/li&gt;
&lt;li&gt;Delete Recovery HD partition to get continuous free-space&lt;/li&gt;
&lt;li&gt;&amp;ldquo;OK, let’s start from zero.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Create El Capitan’s install drive from another mac using &lt;code&gt;sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reboot MBP with that disk, erase Macintosh HD again, and this worked normally.&lt;/li&gt;
&lt;li&gt;Perform clean install.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What if I need to merge scattered partitions which cannot be merged easily? 🔜 Some features of CoreStorage can be used like LVM, I guess.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Cloudera CDH 5.8 Quickstart VMで予備の開発環境を作ったときのメモ</title>
      <link>https://log.tuxedokatze.com/2016/cloudera-cdh-5.8-quickstart-vm%E3%81%A7%E4%BA%88%E5%82%99%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%A2/</link>
      <pubDate>Wed, 14 Sep 2016 20:39:20 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/cloudera-cdh-5.8-quickstart-vm%E3%81%A7%E4%BA%88%E5%82%99%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%A2/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;ダウンロード&#34;&gt;ダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cloudera.com/downloads/quickstart_vms/5-8.html&#34;&gt;http://www.cloudera.com/downloads/quickstart_vms/5-8.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現在は各種仮想環境用にイメージが用意されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Box&lt;/li&gt;
&lt;li&gt;VMWare&lt;/li&gt;
&lt;li&gt;KVM&lt;/li&gt;
&lt;li&gt;Docker Container (Clusterdock)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は単一ノードでの検証用かつSparkコード開発用に、VirtualBoxのVMをダウンロードした。
CDH5.8の場合は、CentOS6.7だった。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;特になし。&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;h3 id=&#34;static-ip&#34;&gt;Static IP&lt;/h3&gt;

&lt;p&gt;Quickstart VMはデフォルトでは NAT インターフェースしか持たない。
また、マシンのIPは固定されている。（10.0.2.15）
仮にNetworkManagerで固定IPを設定しても、 &lt;code&gt;/etc/hosts&lt;/code&gt; は上記のものに書き換えられてしまう。&lt;/p&gt;

&lt;p&gt;Static IPを設定したかったので、以下のことを試した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;どこで設定されているのか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/init.d/cloudera-quickstart-init&lt;/code&gt; 内で &lt;code&gt;cloudera-quickstart-ip&lt;/code&gt; コマンドが実行されている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;which cloudera-quickstart-ip&lt;/code&gt; -&amp;gt; &lt;code&gt;/usr/bin/cloudera-quickstart-ip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/bin/cloudera-quickstart-ip&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;第一引数に与えられたIPがあればそれを使用する。&lt;/li&gt;
&lt;li&gt;引数なしの場合、eth0, eth1, eth2の順に IPが付与されているものがあればそれを使う。&lt;/li&gt;
&lt;li&gt;IPが決まれば、/etc/hostsを編集する。上記でIPが定まらなかった場合、127.0.0.1 を使う。&lt;/li&gt;
&lt;li&gt;単一ノードクラスタとするために、manager と workerは同一ノードである。上記で決定したIPを &lt;code&gt;/var/lib/cloudera-quickstart/tutorial/js/config.js&lt;/code&gt; に反映する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;どうすればよいか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBoxで Bridge Network を追加し、VM上で利用できるようにする。

&lt;ul&gt;
&lt;li&gt;CentOS6 なので、&lt;code&gt;service NetworkManager stop&lt;/code&gt; &lt;code&gt;chkconfig NetworkManager off&lt;/code&gt; をして、手動で設定してもいいかもしれない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/init.d/cloudera-quickstart-init&lt;/code&gt; 内で &lt;code&gt;cloudera-quickstart-ip&lt;/code&gt; コマンドに引数として 設定した Static IP を与える。&lt;/li&gt;
&lt;li&gt;reboot&lt;/li&gt;
&lt;li&gt;起動後、Cloudera Manager の Management Service の Status が &amp;ldquo;Reconfiguration Required&amp;rdquo; みたいな状態になっている場合は、反映して、（webコンソールからクラスタを）再起動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Cloudera CDHの手動インストールとVMクラスタ構築方法</title>
      <link>https://log.tuxedokatze.com/2016/cloudera-cdh%E3%81%AE%E6%89%8B%E5%8B%95%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8vm%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E6%A7%8B%E7%AF%89%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 14 Sep 2016 20:29:20 +0900</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/cloudera-cdh%E3%81%AE%E6%89%8B%E5%8B%95%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8vm%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E6%A7%8B%E7%AF%89%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;master (namenode, service): cdh-vm1.local&lt;/li&gt;
&lt;li&gt;slave (datanode, worker): cdh-vm2.local, cdh-vm3.local&lt;/li&gt;
&lt;li&gt;VM: CentOS 7.2 VirtualBox 4Cores 8GB RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;固定IPの設定（VBのBridge Networkを利用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/hosts&lt;/code&gt; の編集&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ipaddr 1&amp;gt;    cdh-vm1.local    cdh-vm1
&amp;lt;ipaddr 2&amp;gt;    cdh-vm2.local    cdh-vm2
&amp;lt;ipaddr 3&amp;gt;    cdh-vm3.local    cdh-vm3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/etc/yum.conf&lt;/code&gt; 内での プロキシサーバーの設定&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SELinuxの停止（※安全だといえる環境なら…）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sed -i -e &#39;s/SELINUX=.*/SELINUX=disabled/g&#39; /etc/selinux/config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reboot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Firewalldの停止（※安全だといえる環境なら…）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;systemctl stop firewalld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl disable firewalld&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;セットアップ用ユーザーの作成&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パスワードを同一のものを使う場合: Superuserもしくは、パスワードレスでsudoが利用できるユーザーを作成

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StrictHostKeyChecking no&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;公開鍵認証を使う場合: &lt;code&gt;ssh-keygen&lt;/code&gt; &lt;code&gt;enter x 2&lt;/code&gt; &lt;code&gt;cp .ssh/id_rsa.pub .ssh/authorized_keys&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PubkeyAuthentication yes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VMのリンククローンを行う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MACアドレスはリセットしておく。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… ここまでをVagrant + Ansibleで構築すると楽。&lt;/p&gt;

&lt;h2 id=&#34;cloudera-cdhの入手&#34;&gt;Cloudera CDHの入手&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cloudera.com/downloads/cdh/5-8-0.html&#34;&gt;Download CDH 5.8.0&lt;/a&gt; をよく読む&lt;/p&gt;

&lt;p&gt;特に、一番簡単なのは、 &lt;a href=&#34;http://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_a.html#cmig_topic_6_5&#34;&gt;Installation Path A - Automated Installation by Cloudera Manager (Non-Production Mode)&lt;/a&gt;
以下の流れとなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;master への Cloudera Managerのインストール&lt;/li&gt;
&lt;li&gt;master の Cloudera Manager から、slave へのCDH5.8インストール&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;master-への-cloudera-managerのインストール&#34;&gt;master への Cloudera Managerのインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://archive.cloudera.com/cm5/installer/latest/cloudera-manager-installer.bin
chmod u+x cloudera-manager-installer.bin
sudo ./cloudera-manager-installer.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;slave-への-cdhインストール&#34;&gt;slave への CDHインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;VMを全機立ち上げる&lt;/li&gt;
&lt;li&gt;master上で、ブラウザから &lt;code&gt;cdh-vm1:7180/cmf/login&lt;/code&gt; へアクセスする&lt;/li&gt;
&lt;li&gt;ライセンス条項を読み、同意&lt;/li&gt;
&lt;li&gt;無償版（Express）、有償版（Enterprise）トライアルなどの選択肢が表示されるが、今回は無償版のExpressを選択&lt;/li&gt;
&lt;li&gt;クラスタのセットアップのために、クラスタに含まれる全ノード（masterも含む）を選択する&lt;/li&gt;
&lt;li&gt;インストール方法は以下の２つ。後者がおすすめ、とあるが、頻繁にアップデートしない環境の場合、前者でもよい。今回は、色々な都合で前者を選択。

&lt;ul&gt;
&lt;li&gt;Package manager 経由 （RPM, DEB）&lt;/li&gt;
&lt;li&gt;Cloudera Percel での配布&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Oracle JDKのインストールに☑を入れる。&lt;/li&gt;
&lt;li&gt;インストールに使用するユーザーの設定

&lt;ul&gt;
&lt;li&gt;root もしくは NOPASSWD 設定の sudoerユーザー&lt;/li&gt;
&lt;li&gt;共通パスワードもしくは公開鍵を指定する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全ノードでManagerおよびCDHのインストールが行われる&lt;/li&gt;
&lt;li&gt;どのServiceを利用するか選択する&lt;/li&gt;
&lt;li&gt;どのノードをどの役割（Role）に割り当てるか選択する

&lt;ul&gt;
&lt;li&gt;今回は初期設定のまま&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;各種Serviceの詳細設定

&lt;ul&gt;
&lt;li&gt;今回は初期設定のまま&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セットアップ状況の検証&lt;/li&gt;
&lt;li&gt;完了&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Link: Notebook collection</title>
      <link>https://log.tuxedokatze.com/2016/link-notebook-collection/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/link-notebook-collection/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jdwittenauer/ipython-notebooks&#34;&gt;https://github.com/jdwittenauer/ipython-notebooks&lt;/a&gt;
&amp;gt; ipython-notebooks - A collection of IPython notebooks covering various topics.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Courseraの&amp;rdquo;Machine Learning by Andrew Ng&amp;rdquo;を含む、いろいろなコースのPython実装版らしい。 他の人が書いたものを見て学ぶには、同じ課題のものを使うのが効果的だと思っているので、すごくありがたい。（Octaveで解いたけど、補助コードが多くてアレだったし。）&lt;/p&gt;

&lt;p&gt;Python implementations for various topics/courses including “Machine Learning” on Coursera by Andrew Ng. It would be effective to learn from codes for the same exercises written by others, which I’ve been thinking lately, I appreciate for publishing this.
(I&amp;rsquo;ve completed the course with Octave, but there are too much helper codes which make the coding process somehow unenjoyable.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Link: LSTM</title>
      <link>https://log.tuxedokatze.com/2016/link-lstm/</link>
      <pubDate>Sat, 06 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://log.tuxedokatze.com/2016/link-lstm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://r2rt.com/written-memories-understanding-deriving-and-extending-the-lstm.html&#34;&gt;http://r2rt.com/written-memories-understanding-deriving-and-extending-the-lstm.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Written Memories: Understanding, Deriving and Extending the LSTM - R2RT&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this post, we do a few things: We’ll define and describe RNNs generally, focusing on the limitations of vanilla RNNs that led to the development of the LSTM.
We’ll describe the intuitions behind the LSTM architecture, which will enable us to build up to and derive the LSTM. Along the way we will derive the GRU. We’ll also derive a pseudo LSTM, which we’ll see is better in principle and performance to the standard LSTM.
We’ll then extend these intuitions to show how they lead directly to a few recent and exciting architectures: highway and residual networks, and Neural Turing Machines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Neural系言語処理、全く追いつけていないので勉強しないと… （精度が高いとか流行りだからとかではなく、複合的なタスクが解けるようになるような新しさに興味がある）&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>